# -*- coding: utf-8 -*-
"""Bigdata project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_T3dO8BxFkTIGu1kDqwxnI_nnQPAy01w

Initially we need to install the boto3 into the python.Boto3 is the AWS SDK which is used for the python programming language to intract with the AWS DynamoDB
"""

pip install boto3

pip install dynamodb-json

import boto3
import time 
import uuid 
from datetime import datetime  
from dynamodb_json import json_util as json 
from __future__ import print_function
import json
import decimal
from google.colab import drive
import timeit
from boto3.dynamodb.conditions import Key, Attr
import time

AWS_ACCESS = "AKIAUKDQZVUI2NMDVSXR"
AWS_SECRET = "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"
AWS_REGION = "us-east-2"
TABLE_NAME = "books"

"""Above are the variables used for the configuration of the Accesskey,Secret access key id are required to access the particular account and aws_region is used to access the particular region(which is nearest)"""

dynamodb_client = boto3.client('dynamodb',aws_secret_access_key=AWS_SECRET,aws_access_key_id=AWS_ACCESS,region_name=AWS_REGION)

"""Above query is to connect with the AWS DynamoDb console using the aws configuration mentioned in the above variables"""

#dynamodb = client.resource('dynamodb', region_name='us-east-2')
#movies_table = dynamodb_client.create_table(TableName='Movies',KeySchema=[{'AttributeName': 'year','KeyType': 'HASH'},{'AttributeName': 'title','KeyType': 'RANGE'}],AttributeDefinitions=[{'AttributeName': 'year','AttributeType': 'N'},{'AttributeName': 'title','AttributeType': 'S'},],ProvisionedThroughput={'ReadCapacityUnits': 10,'WriteCapacityUnits': 10 })
movies_table = dynamodb_client.create_table(TableName='Movies',KeySchema=[{'AttributeName': 'year','KeyType': 'HASH'},{'AttributeName': 'title','KeyType': 'RANGE'}],AttributeDefinitions=[{'AttributeName': 'year','AttributeType': 'N'},{'AttributeName': 'title','AttributeType': 'S'},],ProvisionedThroughput={'ReadCapacityUnits': 10,'WriteCapacityUnits': 10 })

"""Above query is used for creating the table name "Movies" with the partition key as year and sort key as title.Key type and the attribute type are mentioned.For the partition key the key type is HASH and for the sort key the key type is RANGE."""

drive.mount("/content/drive")

"""I connected with my google drive where I stored the json file which I downloaded from the github"""

file="/content/drive/My Drive/moviedata.json"
print(file)

#Inserting bulk data into the table
dynamodb = boto3.resource('dynamodb', region_name='us-east-2',aws_secret_access_key=AWS_SECRET,aws_access_key_id=AWS_ACCESS)
table = dynamodb.Table('Movies')

start = time.time()

with open(file) as json_file:
    movies = json.load(json_file, parse_float = decimal.Decimal)
    for movie in movies:
        year = int(movie['year'])
        title = movie['title']
        info = movie['info']

        print("Adding data:", year, title)

        table.put_item(
           Item={
               'year': year,
               'title': title,
               'info': info,
            }
        )

end = time.time()
print(end - start)

"""Above query is used for loading the json file from the location and adding the items in bulk into the table using the put item. I am adding year, title and the info items into the table from the json file. I have used time for calculating the query start time and the query end time just to make sure to keep a track of the time taken"""

#Putting Single Item into the table using PutItem
start = time.time()
title = "The Big New Movie"
year = 2015

response = table.put_item(
   Item={
        'year': year,
        'title': title,
        'info': {
            'plot':"Nothing happens at all.",
            'rating': decimal.Decimal(0)
        }
    }
)

print("Putting single Item succeeded:")
print(json.dumps(response, indent=4))
end = time.time()
print(end - start)

"""The Above query is used for adding a single item into the table"""

#Getting Single Item from the table using GetItem
start = time.time()
title = "New Movie"
year = 2021

try:
    response = table.get_item(
        Key={
            'year': year,
            'title': title
        }
    )


except (ClientError, KeyError) as e:
        print_(e)

end = time.time()
print(end - start)

"""The Above query is used for getting a single item into the table"""

#Get Item
start = time.time()
response = table.get_item(Key={'year': year, 'title': title})
print("Get Item:")
print(json.dumps(response, indent=4))
end = time.time()
print(end - start)

start = time.time()
response = table.query(
    KeyConditionExpression=Key('year').eq(1995)
)

for i in response['Items']:
    print(i['year'], ":", i['title'])
end = time.time()
print(end - start)

"""For providing the KeyConditionExpression we use key. The Above query is used for getting the data from the table using a condition."""

start = time.time()
class DecimalEncoder(json.JSONEncoder):
    def default(self, o):
        if isinstance(o, decimal.Decimal):
            return str(o)
        return super(DecimalEncoder, self).default(o)
response = table.query(
    ProjectionExpression="#yr, title, info.genres, info.actors[0]",
    ExpressionAttributeNames={ "#yr": "year" },
    KeyConditionExpression=Key('year').eq(2000) & Key('title').between('T', 'W')
)
for i in response[u'Items']:
    print(json.dumps(i, cls=DecimalEncoder))

end = time.time()
print(end - start)

"""The above query is used to get the data with the data filter year 2000 and the title has a value which starts with "T" and "W""""

#filter
start = time.time()
response = table.scan(FilterExpression=Attr('actors').contains('A'))
print(response)
end = time.time()
print(end - start)

"""For FilterExpression we use Attr and the above query is used for filtering the table with the actors containing 'A' in their value."""